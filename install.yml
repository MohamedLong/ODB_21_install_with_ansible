---
- name: Install Oracle Database 21c
  hosts: oracle_db
  become: true
  vars:
    oracle_user: "oracle"
    oracle_group: "oinstall"
    oracle_base: "/u01/app/oracle"
    oracle_home: "/u01/app/oracle/product/21c/dbhome_1"
    inventory_location: "/u01/app/oraInventory"
    db_name: "orcl"
    sys_password: "MySysPass123"
    system_password: "MySysPass123"
    oracle_zip: "/tmp/LINUX.X64_213000_db_home.zip"
    local_oracle_zip: "files/LINUX.X64_213000_db_home.zip"
    oracle_install_dir: "/tmp/oracle_install"

  tasks:
    # Check if the Oracle installation ZIP file already exists on the server
    - name: Check if Oracle ZIP file exists
      stat:
        path: "{{ oracle_zip }}"
      register: oracle_zip_stat

    # Copy the Oracle installation ZIP file to the server if it doesn't already exist
    - name: Copy Oracle ZIP file to server (if missing)
      copy:
        src: "{{ local_oracle_zip }}"
        dest: "{{ oracle_zip }}"
        owner: "{{ oracle_user }}"
        group: "{{ oracle_group }}"
        mode: '0644'
      when: not oracle_zip_stat.stat.exists

    # Extract the Oracle installation ZIP file to the specified Oracle home directory
    - name: Extract Oracle DB installation zip file
      ansible.builtin.unarchive:
        src: "{{ oracle_zip }}"
        dest: "{{ oracle_home }}"
        remote_src: yes
        owner: "{{ oracle_user }}"
        group: "{{ oracle_group }}"
        mode: '0755'
      become_user: "{{ oracle_user }}"
      when: oracle_zip_stat.stat.exists

    # Copy the Oracle response file to the server for silent installation
    - name: Copy Oracle response file to server
      copy:
        src: files/db_install.rsp
        dest: "{{ oracle_home }}/install/response/db_install.rsp"
        owner: "{{ oracle_user }}"
        group: "{{ oracle_group }}"
        mode: '0644'

    # Run the Oracle installer in silent mode using the response file
    - name: Run Oracle installer in silent mode
      command: >
        {{ oracle_home }}/runInstaller -silent
        -responseFile {{ oracle_home }}/install/response/db_install.rsp
        -ignorePrereq
      become_user: "{{ oracle_user }}"
      register: install_output
      changed_when: "'Successfully Setup Software' in install_output.stdout"
      failed_when: install_output.rc != 0 and 'Successfully Setup Software' not in install_output.stdout

    # Execute the mandatory root scripts after Oracle installation
    - name: Run root scripts required after installation
      command: "{{ item }}"
      become: yes
      with_items:
        - "/u01/app/oraInventory/orainstRoot.sh"
        - "/u01/app/oracle/product/21c/dbhome_1/root.sh"

    # Create the Oracle database using the Database Configuration Assistant (DBCA)
    - name: Create Oracle Database using DBCA
      command: >
        {{ oracle_home }}/bin/dbca
        -silent
        -createDatabase
        -templateName General_Purpose.dbc
        -gdbname {{ db_name }}
        -sid {{ db_name }}
        -characterSet AL32UTF8
        -sysPassword {{ sys_password }}
        -systemPassword {{ system_password }}
        -createAsContainerDatabase true
        -storageType FS
        -datafileDestination {{ oracle_base }}/oradata
        -memoryPercentage 40
        -emConfiguration NONE
      become_user: "{{ oracle_user }}"
      register: install_output
      # when: install_output.rc == 0
      tags: 
        - DBCA

    # Display the installation output for debugging and verification
    - name: Show installation output
      debug:
        msg: "{{ install_output.stdout }}"

    # Start Oracle Listener
    - name: Start Oracle Listener
      shell: ". ~/.bash_profile && lsnrctl start"
      become_user: "{{ oracle_user }}"
      register: listener_start
      changed_when: "'The command completed successfully' in listener_start.stdout"
      tags:
        - listener
        

    - name: Start Oracle Database
      shell: |
        source /home/oracle/.bash_profile
        sqlplus / as sysdba <<EOF
        STARTUP;
        EXIT;
        EOF
      become_user: "{{ oracle_user }}"
      register: db_startup
      changed_when: false
      ignore_errors: yes
      tags:
        - start_db

    - name: Display database startup result
      debug:
        msg: "{{ db_startup.stdout_lines }}"
      when: db_startup.rc == 0
      tags:
        - start_db